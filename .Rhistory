v1 <- 1:10
v2 = 10:1
print(v1)
v2
v1[5];v1[3];v1[1];v1[0]
v1[5];v1[3];v1[1];v1[0];v1[6]
v1 <- 1:10
v2 = 10:1
print(v1)
v2
v3 <- 100
v3
v1 <- c(4,1,8,6,10)
v2 <- c(100, 200, TRUE, FALSE); print(v2)
v3 <- c("100", 200, T, F); print(v3)
v1[5];v1[3];v1[1];v1[0];v1[6]
length(v3)
LETTERS[1]; LETTERS[c(3,4,5)]
rep(1, 100)
rep(1:3, 5)
rep(1:3, times=5) # 키워드 파라미터
rep(1:3, each=5)
?rep  #help()
LETTERS
letters
month.name
month.abb
pi
LETTERS;letters;month.name;month.abb;pi
LETTERS[1]; LETTERS[c(3,4,5)]
LETTERS[3:5]; LETTERS[5:3]
LETTERS[-1]; LETTERS[c(-2,-4)]
length(LETTERS)
length(month.name)
length(pi)
x <- c(10,2,7,4,15)
x
print(x)
class(x)
rev(x)
range(x)
sort(x)
sort(x, decreasing = TRUE)
sort(x, decreasing = T)
#x <- sort(x)
order(x)
x[3] <- 20
x
x + 1
x <- x + 1
max(x);min(x);mean(x);sum(x)
summary(x)
x[c(2,4)] # x[2], x[4]
x[c(F,T,F,T,F)] # x[c(T,F)]
x > 5
x[x > 5]
x[x > 5 & x < 15] # x[x > 5 && x < 15]
#x[x > 5 | x < 15]
names(x)
names(x) <- LETTERS[1:5]
names(x) <- NULL
x[2];x["B"]; #x[B()]
# &, &&
c(T, T, F, F) & c(T, F, T, F)
c(T, T, F, F) | c(T, F, T, F)
c(T, T, F, F) && c(T, F, T, F)
c(T, T, F, F) || c(T, F, T, F)
ls()
rm(x)
x
class(x)
rainfall <- c(21.6, 23.6, 45.8, 77.0,
102.2, 133.3,327.9, 348.0,
137.6, 49.3, 53.0, 24.9)
rainfall > 100
rainfall[rainfall > 100]
which(rainfall > 100)
month.name[which(rainfall > 100)]
month.abb[which(rainfall > 100)]
month.korname <- c("1월","2월","3월",
"4월","5월","6월",
"7월","8월","9월",
"10월","11월","12월")
month.korname[which(rainfall > 100)]
which.max(rainfall)
which.min(rainfall)
month.korname[which.max(rainfall)]
month.korname[which.min(rainfall)]
sample(1:20, 3)
sample(1:45, 6)
sample(1:10, 7)
sample(1:10, 7, replace=T)
paste("I'm","Duli","!!")
paste("I'm","Duli","!!", sep="")
paste0("I'm","Duli","!!")
fruit <- c("Apple", "Banana", "Strawberry")
food <- c("Pie","Juice", "Cake")
paste(fruit, food)
paste(fruit, food, sep="")
paste(fruit, food, sep=":::")
paste(fruit, food, sep="", collapse="-")
paste(fruit, food, sep="", collapse="")
paste(fruit, food, collapse=",")
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
#v2 에서 합을 추출하여 sum_v 에 저장한다.
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
#v1, v2, v3, max_v, min_v, avg_v, sum_v를 화면에 출력
#문제1
# 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
V1 <- 1:10
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
V2 <- V1*2
CLEAR
clear
print(v2)
#문제1
# 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
V1 <- 1:10
print(v1)
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
V2 <- V1*2
print(v2)
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
#v2 에서 합을 추출하여 sum_v 에 저장한다.
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
#v1, v2, v3, max_v, min_v, avg_v, sum_v를 화면에 출력한다.
#문제1
# 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
V1 <- 1:10
print(v1)
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
V2 <- V1*2
print(v2)
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
#v2 에서 합을 추출하여 sum_v 에 저장한다.
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
#v1, v2, v3, max_v, min_v, avg_v, sum_v를 화면에 출력한다.
#문제1
# 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
v1
V1 <- 1:10
print(v1)
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
v2
V2 <- V1*2
print(v2)
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
#v2 에서 합을 추출하여 sum_v 에 저장한다.
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
#v1, v2, v3, max_v, min_v, avg_v, sum_v를 화면에 출력한다.
v1
#문제1
# 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
V1 <- 1:10
print(v1)
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
V2 <- V1*2
print(v2)
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
#v2 에서 합을 추출하여 sum_v 에 저장한다.
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
#v1, v2, v3, max_v, min_v, avg_v, sum_v를 화면에 출력한다.
v1 <- 1:10
#문제1
# 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
V1 <- 1:10
print(v1)
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
V2 <- V1*2
print(v2)
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
#v2 에서 합을 추출하여 sum_v 에 저장한다.
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
#v1, v2, v3, max_v, min_v, avg_v, sum_v를 화면에 출력한다.
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
print(max(v2))
source('C:/Users/ajgkw/Multicampus/day1.R', echo=TRUE)
#문제1
# 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
V1 <- 1:10
v1
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
V2 <- V1*2
v2
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
print(max(v2))
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
#v2 에서 합을 추출하여 sum_v 에 저장한다.
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
#v1, v2, v3, max_v, min_v, avg_v, sum_v를 화면에 출력한다.
v1 <- 1:10
v2 = 10:1
print(v1)
v2
v3 <- 100
v3
v1 <- c(4,1,8,6,10)
v2 <- c(100, 200, TRUE, FALSE); print(v2)
v3 <- c("100", 200, T, F); print(v3)
v1[5];v1[3];v1[1];v1[0];v1[6]
length(v3)
v1 <- 1:10
v2 = 10:1
V1 <- 1:10
v1
V2 <- V1*2
v2
V2 <- c(V1*2)
v2
V1 <- 1:10
v1
#각 원소 값들에 2를 곱한 결과로 벡터 v2 를 만든다.
v2<- v1
v2 <- v2*2
v2
print(max(v2))
max_v = max(v2)
max_v
#v2 에서 최대값을 추출하여 max_v 에 저장한다.
max_v = max(v2)
max_v
#v2 에서 최소값을 추출하여 min_v 에 저장한다.
min_v = min(v2)
min_v
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
avg_v = avg(v2)
avg_v
#v2 에서 평균값을 추출하여 avg_v 에 저장한다.
avg_v = mean(v2)
avg_v
#v2 에서 합을 추출하여 sum_v 에 저장한다.
sum_v = sumv(v2)
sum
sum_v = sumv(v2)
sum_v
#v2 에서 합을 추출하여 sum_v 에 저장한다.
sum_v = sumv(v2)
sum_v
#v2 에서 합을 추출하여 sum_v 에 저장한다.
sum_v = sum(v2)
sum_v
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
v2[1:4]
v2[6:10]
#v2 에서 5번째 원소를 제외하고 v3 라는 변수에 저장한다.
v3 = v2
v3[-5]
v3
v3 = v2
v3 = v3[-5]
v3
print(v1,v2,v3,max_v, min_v, avg_v, sum_v)
v1; v2; v3; max_v; min_v; avg_v; sum_v
v1;v2;v3;max_v;min_v;avg_v;sum_v
#(1) 1, 3, 5, 7, 9
seq(from = 1, to = 9, by = 2)
rep(1,5)
rep(c(1:3) ,times = 3)
rep(c(1:4) ,each = 2)
nums = sample(c(1:100), n=10)
nums = sample(x=1:100, n=10)
#1부터 100으로 구성되는 10개의 중복되지 않는 데이터를 추출하여 nums 라는 백터를 만든다.
nums = sample(1:100, 10)
nums
#오름차순으로 정렬한 결과를 출력한다.
sort(nums)
#내림차순으로 정렬한 결과를 출력한다.
sort(nums, decreasing = TRUE)
#50보다 큰 원소 값들만 출력한다.
nums[nums<50]
nums[nums > 50]
#50보다 작거나 같은 원소들의 인덱스를 출력한다.
nums[nums <= 50]
nums [max(nums)]
which.max(nums)
v8 = seq(from = 1, to = 10, by = 3)
names(v8) <- c("A", "B", "C", D")
v8
v8 = seq(from = 1, to = 10, by = 3)
names(v8) <- c("A", "B", "C", "D")
v8 = seq(from = 1, to = 10, by = 3)
v8
names(v8) <- c("A", "B", "C", "D")
names(v8)
score = sample(1:20, 5)
names(score) = c("둘리", "또치", "도우너", "희동", "듀크")
names[score]
names(score)
score;names(score)
score-names(score);
score +names(score);
score = sample(1:20, 5)
myFriend = c("둘리", "또치", "도우너", "희동", "듀크")
score<-myFriend;
score = sample(1:20, 5)
myFriend = c("둘리", "또치", "도우너", "희동", "듀크")
names(score) <- myFriend
score
score = sample(1:20, 5)
myFriend = c("둘리", "또치", "도우너", "희동", "듀크")
-도우너” “9-희동” “10-듀크”
paste(score, myFriend, sep="-")
#1부터 20으로 구성되는 5개의 중복되지 않는 데이터를 추출하여 score 라는 백터를 만든다.myFriend 이라는 이름으로 “둘리”, “또치”, “도우너”, “희동”, “듀크” 값으로 벡터를 만든다.
score = sample(1:20, 5)
myFriend = c("둘리", "또치", "도우너", "희동", "듀크")
#(1) 다음 형식으로 구성되는 벡터를 생성하여 출력한다.추출된 값이 – 15, 7, 3, 9, 10 이라면 다음과 같이 출력한다.“15-둘리” “7-또치” “3-도우너” “9-희동” “10-듀크”
paste(score, myFriend, sep="-")
############문제5############
#1부터 20으로 구성되는 5개의 중복되지 않는 데이터를 추출하여 score 라는 백터를 만든다.myFriend 이라는 이름으로 “둘리”, “또치”, “도우너”, “희동”, “듀크” 값으로 벡터를 만든다.
score = sample(1:20, 5)
myFriend = c("둘리", "또치", "도우너", "희동", "듀크")
score
myFriend
#(1) 다음 형식으로 구성되는 벡터를 생성하여 출력한다.추출된 값이 – 15, 7, 3, 9, 10 이라면 다음과 같이 출력한다.“15-둘리” “7-또치” “3-도우너” “9-희동” “10-듀크”
paste(score, myFriend, sep="-")
#(2) 점수가 가장 높은 친구의 이름을 출력한다.
max(score)
myFriend[which.max(score)]
#(3) 점수가 가장 낮은 친구의 이름을 출력한다.
myFriend[which.min(score)]
myFriend[which(score > 10)]
############문제6############
#1부터 100으로 구성되는 7개의 중복되지 않는 데이터를 추출하여 count 라는 백터를 만든다.
count = sample(1:100, 7)
#week.korname 이라는 이름으로 “일요일”….”토요일” 값으로 벡터를 만든다.다음 형식으로 구성되는 벡터를 생성하여 출력한다.
week.korname("일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일")
#추출된 값이 – 21, 40, 11, 55, 70, 90, 30 이라면 다음과 같이 적용된다.“일요일 : 21”   “월요일 : 40”   “화요일 : 11” ……………..   “토요일 : 30”
paste(week.korname, count, sep=" : ")
#값이 가장 큰 요일의 명칭을 출력한다.
week.korname[which.max(count)]
#값이 가장 작은 요일의 명칭을 출력한다.
week.korname[which.min(count)]
#50보다 큰 값에 해당하는 요일의 명칭을 출력한다.
week.korname[which(count>50)]
count = sample(1:100, 7)
count = sample(1:100, 7)
count
week.korname("일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일")
week.korname = c("일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일")
paste(week.korname, count, sep=" : ")
week.korname[which.max(count)]
#값이 가장 큰 요일의 명칭을 출력한다.
week.korname[which.max(count)]
#값이 가장 작은 요일의 명칭을 출력한다.
week.korname[which.min(count)]
#50보다 큰 값에 해당하는 요일의 명칭을 출력한다.
week.korname[which(count>50)]
